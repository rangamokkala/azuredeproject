{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DFMetaETL"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_archive_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText4",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_job_runner')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set_job_id",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_job_id",
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "intialize_tasks",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set_job_id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[control].[sp_init_job_control]",
							"storedProcedureParameters": {
								"job": {
									"value": {
										"value": "@pipeline().parameters.p_job",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_id": {
									"value": {
										"value": "@variables('v_job_id')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "get_enviroment_parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "intialize_tasks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select\n\n1,\n\n'0',\n\n'load_customer',\n\n'2024-01-08',\n\ntask,\n\ntask_sequence,\n\n'SCHEDULED'\n\nfrom config.job_tasks\n\nwhere job = 'load_customer'\n\nand active = 'Y'\n\norder by task_sequence",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_generic_azure_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "get_task",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "get_enviroment_parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[control].[sp_get_tasks]",
								"storedProcedureParameters": {
									"job": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.p_job",
											"type": "Expression"
										}
									},
									"job_id": {
										"type": "String",
										"value": {
											"value": "@variables('v_job_id')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_generic_azure_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "run_each_task",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_task",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get_task').output",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set_task_log",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_task_log",
										"value": {
											"value": "@concat('Starting task',item().task)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "log_start_task",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Set_task_log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[control].[sp_job_task_log]",
										"storedProcedureParameters": {
											"job": {
												"value": {
													"value": "@pipeline().parameters.p_job",
													"type": "Expression"
												},
												"type": "String"
											},
											"job_id": {
												"value": {
													"value": "@variables('v_job_id')",
													"type": "Expression"
												},
												"type": "String"
											},
											"job_status": {
												"value": "RUNNING",
												"type": "String"
											},
											"status_description": {
												"value": {
													"value": "@variables('v_task_log')",
													"type": "Expression"
												},
												"type": "String"
											},
											"task": {
												"value": {
													"value": "@item().task",
													"type": "Expression"
												},
												"type": "String"
											},
											"task_id": {
												"value": "0",
												"type": "String"
											},
											"task_sequence": {
												"value": {
													"value": "@item().task_sequence",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"task_status": {
												"value": "SCHEDULE",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_azure_sql",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "check_prior_task_status",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "log_start_task",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[control].[sp_task_status]",
										"storedProcedureParameters": {
											"task_status": {
												"value": {
													"value": "@variables('v_task_status')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_azure_sql",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "run_task",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "check_prior_task_status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(\n\t'https://management.azure.com/subscription/',\n\tactivity('get_enviroment_parameters').output.firstRow.subcription,\n\t'/resourceGroups/',\n\tactivity('get_enviroment_parameters').output.firstRow.rg,\n\t'/providers/Microsoft.DataFactory/factories/',\n\tactivity('get_enviroment_parameters').output.firstRow.adf,\n\t'/pipelines/',\n    item().task,\n    '/createRun?api-version-2018-06-01'\n)",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n\t'{',\n\t'\"p_job : \"',item().job,\n\t'\"p_job_id : \"',variables('v_job_id'),\n\t'\", \"P_task_sequence\" : \"',item().task_sequence,\n'\" }'\n)",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "'https://management.azure.com"
										}
									}
								},
								{
									"name": "Set_run_id",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "run_task",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_run_id",
										"value": {
											"value": "@activity('run_task').output.runid",
											"type": "Expression"
										}
									}
								},
								{
									"name": "check_task_status",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set_run_id",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_check_status",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"p_run_id": {
												"value": "@variables('v_run_id')",
												"type": "Expression"
											},
											"p_job": {
												"value": "@pipeline().parameters.p_job",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "task_successfull",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "check_task_status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_task_status",
										"value": "SUCCESS"
									}
								},
								{
									"name": "task_failed",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "check_task_status",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_task_status",
										"value": "FAILURE"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_job": {
						"type": "string"
					}
				},
				"variables": {
					"v_job_id": {
						"type": "String"
					},
					"v_task_log": {
						"type": "String"
					},
					"v_task_status": {
						"type": "String"
					},
					"v_run_id": {
						"type": "String"
					}
				},
				"folder": {
					"name": "framework"
				},
				"annotations": [
					"@pipeplie().parameters.p_job"
				]
			},
			"dependsOn": []
		}
	]
}